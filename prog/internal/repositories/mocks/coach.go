// Code generated by MockGen. DO NOT EDIT.
// Source: coach.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "prog/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoachRepository is a mock of CoachRepository interface.
type MockCoachRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoachRepositoryMockRecorder
}

// MockCoachRepositoryMockRecorder is the mock recorder for MockCoachRepository.
type MockCoachRepositoryMockRecorder struct {
	mock *MockCoachRepository
}

// NewMockCoachRepository creates a new mock instance.
func NewMockCoachRepository(ctrl *gomock.Controller) *MockCoachRepository {
	mock := &MockCoachRepository{ctrl: ctrl}
	mock.recorder = &MockCoachRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoachRepository) EXPECT() *MockCoachRepositoryMockRecorder {
	return m.recorder
}

// AddDirection mocks base method.
func (m *MockCoachRepository) AddDirection(ctx context.Context, coachID, directionID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDirection", ctx, coachID, directionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDirection indicates an expected call of AddDirection.
func (mr *MockCoachRepositoryMockRecorder) AddDirection(ctx, coachID, directionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDirection", reflect.TypeOf((*MockCoachRepository)(nil).AddDirection), ctx, coachID, directionID)
}

// Create mocks base method.
func (m *MockCoachRepository) Create(ctx context.Context, coach *models.Coach) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coach)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCoachRepositoryMockRecorder) Create(ctx, coach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoachRepository)(nil).Create), ctx, coach)
}

// GetAllByDirection mocks base method.
func (m *MockCoachRepository) GetAllByDirection(ctx context.Context, id uint64) ([]models.Coach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByDirection", ctx, id)
	ret0, _ := ret[0].([]models.Coach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByDirection indicates an expected call of GetAllByDirection.
func (mr *MockCoachRepositoryMockRecorder) GetAllByDirection(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByDirection", reflect.TypeOf((*MockCoachRepository)(nil).GetAllByDirection), ctx, id)
}

// GetByID mocks base method.
func (m *MockCoachRepository) GetByID(ctx context.Context, id uint64) (*models.Coach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Coach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCoachRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCoachRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockCoachRepository) GetByName(ctx context.Context, name string) (*models.Coach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Coach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCoachRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCoachRepository)(nil).GetByName), ctx, name)
}
