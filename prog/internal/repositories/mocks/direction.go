// Code generated by MockGen. DO NOT EDIT.
// Source: direction.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "prog/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirectionRepository is a mock of DirectionRepository interface.
type MockDirectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDirectionRepositoryMockRecorder
}

// MockDirectionRepositoryMockRecorder is the mock recorder for MockDirectionRepository.
type MockDirectionRepositoryMockRecorder struct {
	mock *MockDirectionRepository
}

// NewMockDirectionRepository creates a new mock instance.
func NewMockDirectionRepository(ctrl *gomock.Controller) *MockDirectionRepository {
	mock := &MockDirectionRepository{ctrl: ctrl}
	mock.recorder = &MockDirectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectionRepository) EXPECT() *MockDirectionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDirectionRepository) Create(ctx context.Context, direction *models.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDirectionRepositoryMockRecorder) Create(ctx, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDirectionRepository)(nil).Create), ctx, direction)
}

// GetAll mocks base method.
func (m *MockDirectionRepository) GetAll(ctx context.Context) ([]models.Direction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Direction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDirectionRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDirectionRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockDirectionRepository) GetByID(ctx context.Context, id uint64) (*models.Direction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Direction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDirectionRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDirectionRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockDirectionRepository) GetByName(ctx context.Context, name string) (*models.Direction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Direction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDirectionRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDirectionRepository)(nil).GetByName), ctx, name)
}
