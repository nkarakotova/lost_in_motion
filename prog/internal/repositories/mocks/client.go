// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "prog/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientRepository) Create(ctx context.Context, client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientRepositoryMockRecorder) Create(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientRepository)(nil).Create), ctx, client)
}

// DeleteAssignment mocks base method.
func (m *MockClientRepository) DeleteAssignment(ctx context.Context, clientID, trainingID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssignment", ctx, clientID, trainingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssignment indicates an expected call of DeleteAssignment.
func (mr *MockClientRepositoryMockRecorder) DeleteAssignment(ctx, clientID, trainingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssignment", reflect.TypeOf((*MockClientRepository)(nil).DeleteAssignment), ctx, clientID, trainingID)
}

// GetByID mocks base method.
func (m *MockClientRepository) GetByID(ctx context.Context, id uint64) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockClientRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockClientRepository)(nil).GetByID), ctx, id)
}

// GetByTelephone mocks base method.
func (m *MockClientRepository) GetByTelephone(ctx context.Context, telephone string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTelephone", ctx, telephone)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTelephone indicates an expected call of GetByTelephone.
func (mr *MockClientRepositoryMockRecorder) GetByTelephone(ctx, telephone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTelephone", reflect.TypeOf((*MockClientRepository)(nil).GetByTelephone), ctx, telephone)
}

// GetByTraining mocks base method.
func (m *MockClientRepository) GetByTraining(ctx context.Context, id uint64) ([]models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTraining", ctx, id)
	ret0, _ := ret[0].([]models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTraining indicates an expected call of GetByTraining.
func (mr *MockClientRepositoryMockRecorder) GetByTraining(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTraining", reflect.TypeOf((*MockClientRepository)(nil).GetByTraining), ctx, id)
}

// СreateAssignment mocks base method.
func (m *MockClientRepository) СreateAssignment(ctx context.Context, clientID, trainingID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СreateAssignment", ctx, clientID, trainingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// СreateAssignment indicates an expected call of СreateAssignment.
func (mr *MockClientRepositoryMockRecorder) СreateAssignment(ctx, clientID, trainingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СreateAssignment", reflect.TypeOf((*MockClientRepository)(nil).СreateAssignment), ctx, clientID, trainingID)
}
